FROM node:20-alpine
WORKDIR /usr/src/app

RUN apk add --no-cache openssl

COPY package*.json ./
RUN npm install --no-audit --no-fund

COPY prisma ./prisma
RUN npx prisma generate

COPY tsconfig.json ./
COPY src ./src

EXPOSE 8080 5555
CMD ["npm","run","dev"]

# ============================================================================
# üìò R√©sum√© p√©dagogique complet ‚Äî Comprendre le r√¥le et la logique de ce Dockerfile
# ----------------------------------------------------------------------------
# üîπ 1. Objectif du fichier
#
# Ce fichier Docker d√©crit **comment construire l‚Äôimage du serveur Node.js**.
# Il permet de cr√©er un environnement isol√© contenant tout le n√©cessaire
# pour ex√©cuter ton application Express + Prisma + TypeScript.
#
# En r√©sum√© :
#   ‚ûú Dockerfile = "recette" utilis√©e par Docker pour b√¢tir un conteneur ex√©cutable.
#
# ----------------------------------------------------------------------------
# üîπ 2. Ligne par ligne
#
# --------------------------------------------------------------------------
# FROM node:20-alpine
# --------------------------------------------------------------------------
# ‚ûú On part d‚Äôune image officielle Node.js bas√©e sur **Alpine Linux**.
#   - Alpine est une distribution tr√®s l√©g√®re, donc rapide √† t√©l√©charger.
#   - Node 20 est la version LTS (Long Term Support).
#
# ‚ö†Ô∏è Inconv√©nient : Alpine utilise musl (et non glibc),
# ce qui peut parfois poser des probl√®mes avec certaines d√©pendances binaires,
# comme Prisma (qui n√©cessite souvent libssl).
#
# --------------------------------------------------------------------------
# WORKDIR /usr/src/app
# --------------------------------------------------------------------------
# ‚ûú D√©finit le **r√©pertoire de travail** √† l‚Äôint√©rieur du conteneur.
#   Toutes les commandes suivantes s‚Äôex√©cuteront dans ce dossier.
#
# Exemple :
#   COPY . .  ‚Üí copiera les fichiers dans /usr/src/app
#
# --------------------------------------------------------------------------
# RUN apk add --no-cache openssl
# --------------------------------------------------------------------------
# ‚ûú Installe la librairie OpenSSL (obligatoire pour Prisma).
#   Sans cette d√©pendance, Prisma renverrait une erreur du type :
#     "Prisma failed to detect libssl version"
#
#   - `apk` = gestionnaire de paquets d‚ÄôAlpine.
#   - `--no-cache` = √©vite de stocker les fichiers d‚Äôinstallation.
#
# --------------------------------------------------------------------------
# COPY package*.json ./
# RUN npm install --no-audit --no-fund
# --------------------------------------------------------------------------
# ‚ûú √âtape de copie et d‚Äôinstallation des d√©pendances :
#   - `COPY package*.json ./` ‚Üí copie uniquement les manifestes npm.
#   - `RUN npm install` ‚Üí installe les d√©pendances du projet.
#
# üí° Astuce :
#   Copier d‚Äôabord les fichiers `package*.json` permet √† Docker
#   de **mettre en cache** cette √©tape si les d√©pendances ne changent pas,
#   ce qui acc√©l√®re les builds suivants.
#
#   Les flags `--no-audit` et `--no-fund` √©vitent les messages inutiles.
#
# --------------------------------------------------------------------------
# COPY prisma ./prisma
# RUN npx prisma generate
# --------------------------------------------------------------------------
# ‚ûú Copie le dossier Prisma et g√©n√®re le client.
#   - `npx prisma generate` cr√©e le client JavaScript/TypeScript
#     √† partir du fichier `prisma/schema.prisma`.
#
#   Cela permet d‚Äôutiliser Prisma directement dans le code :
#     import { PrismaClient } from "@prisma/client";
#
# --------------------------------------------------------------------------
# COPY tsconfig.json ./
# COPY src ./src
# --------------------------------------------------------------------------
# ‚ûú Copie la configuration TypeScript et le dossier source de ton application.
#   Tu pourrais aussi copier d‚Äôautres fichiers (ex: `.env`, `README`, etc.)
#   si n√©cessaire.
#
# --------------------------------------------------------------------------
# EXPOSE 8080 5555
# --------------------------------------------------------------------------
# ‚ûú Indique que le conteneur utilisera les ports :
#   - `8080` ‚Üí pour ton API Express,
#   - `5555` ‚Üí pour Prisma Studio (interface graphique optionnelle).
#
# üí° Ces lignes ne publient pas r√©ellement les ports, elles servent
#   de **documentation interne** √† Docker.
#   La publication r√©elle se fait dans `docker-compose.yml` via `ports:`.
#
# --------------------------------------------------------------------------
# CMD ["npm","run","dev"]
# --------------------------------------------------------------------------
# ‚ûú Commande de d√©marrage par d√©faut du conteneur.
#   Elle lance le script `dev` d√©fini dans ton `package.json`,
#   qui ex√©cute probablement :
#       "dev": "tsx watch src/index.ts"
#
#   Donc, en dev : hot-reload activ√© √† chaque changement de fichier.
#
# ----------------------------------------------------------------------------
# üîπ 3. Cycle de vie du build
#
# 1Ô∏è‚É£ Docker lit ce fichier ligne par ligne.
# 2Ô∏è‚É£ Chaque instruction cr√©e une "couche" (layer) dans l‚Äôimage.
# 3Ô∏è‚É£ Les couches inchang√©es sont mises en cache pour acc√©l√©rer les builds.
# 4Ô∏è‚É£ Une fois l‚Äôimage construite, tu peux lancer ton app avec :
#     docker build -t myapp .
#     docker run -p 8080:8080 myapp
#
# ----------------------------------------------------------------------------
# üîπ 4. Bonnes pratiques p√©dagogiques
#
# ‚úÖ Toujours utiliser une image Node LTS (20 ou 22).
# ‚úÖ Isoler le dossier de travail (`WORKDIR`).
# ‚úÖ Installer uniquement les d√©pendances n√©cessaires.
# ‚úÖ Copier `package*.json` avant le reste pour tirer parti du cache Docker.
# ‚úÖ G√©n√©rer Prisma dans l‚Äôimage pour ne pas avoir √† le r√©g√©n√©rer au runtime.
# ‚úÖ Exposer les bons ports pour la clart√©.
# ‚úÖ Utiliser `CMD` (et non `RUN`) pour d√©finir la commande par d√©faut.
#
# ----------------------------------------------------------------------------
# üí° En r√©sum√© :
# ----------------------------------------------------------------------------
# Ce Dockerfile :
#   - cr√©e une image l√©g√®re bas√©e sur Node 20 Alpine ;
#   - installe les d√©pendances de ton projet ;
#   - g√©n√®re le client Prisma ;
#   - copie le code source ;
#   - expose les ports n√©cessaires ;
#   - et lance ton serveur Express en mode d√©veloppement.
#
# ‚û§ P√©dagogiquement :
#   - Il illustre la structure d‚Äôun Dockerfile Node moderne.
#   - Il montre l‚Äôimportance des couches Docker et du cache.
#   - Il relie la logique Prisma + TypeScript √† l‚Äôenvironnement conteneuris√©.
#   - Il pr√©pare les √©tudiants √† comprendre les workflows Docker (build, run, cache).
# ============================================================================