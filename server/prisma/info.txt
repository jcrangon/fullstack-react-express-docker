
/// ============================================================================
/// üìò R√©sum√© p√©dagogique complet ‚Äî Comprendre ce fichier `prisma.schema`
/// ----------------------------------------------------------------------------
/// Ce fichier est le **c≈ìur de la configuration Prisma** : il d√©crit la base de
/// donn√©es et la mani√®re dont Prisma va g√©n√©rer le code pour y acc√©der.
///
/// üîπ 1. Le bloc `generator`
///    - Ici, Prisma va g√©n√©rer un **client JavaScript/TypeScript** pr√™t √† l‚Äôemploi.
///    - Ce client sera disponible via l‚Äôimport suivant dans ton code Node.js :
///        ```ts
///        import { PrismaClient } from '@prisma/client';
///        const prisma = new PrismaClient();
///        ```
///    - C‚Äôest ce client qui te permettra d‚Äôex√©cuter des requ√™tes comme :
///        ```ts
///        const users = await prisma.user.findMany();
///        ```
///
/// üîπ 2. Le bloc `datasource`
///    - Il indique **le type de base de donn√©es** utilis√©e et la **cha√Æne de connexion**.
///    - Ici, `provider = "postgresql"` ‚áí Prisma utilise **PostgreSQL**.
///    - L‚ÄôURL de connexion est r√©cup√©r√©e depuis une **variable d‚Äôenvironnement**
///      (`DATABASE_URL`), d√©finie dans ton fichier `.env`, par exemple :
///        ```bash
///        DATABASE_URL="postgresql://postgres:password@localhost:5432/appdb?schema=public"
///        ```
///
/// üîπ 3. Le mod√®le `User`
///    - Chaque mod√®le repr√©sente **une table** de la base de donn√©es.
///    - Prisma va automatiquement cr√©er la table `User` avec les colonnes suivantes :
///
///      | Champ       | Type Prisma | Type SQL        | R√¥le / D√©tail                                         |
///      |--------------|-------------|------------------|--------------------------------------------------------|
///      | id           | Int         | SERIAL / INTEGER | Cl√© primaire auto-incr√©ment√©e (`@id @default(autoincrement())`) |
///      | email        | String      | TEXT / VARCHAR   | Doit √™tre unique (`@unique`)                           |
///      | name         | String      | TEXT / VARCHAR   | Nom de l‚Äôutilisateur                                   |
///      | password     | String      | TEXT / VARCHAR   | Mot de passe (hash√©)                                  |
///      | createdAt    | DateTime    | TIMESTAMP        | Date de cr√©ation, valeur par d√©faut `now()`            |
///      | updatedAt    | DateTime    | TIMESTAMP        | Mis √† jour automatiquement √† chaque modification (`@updatedAt`) |
///
/// üîπ 4. Migration et g√©n√©ration
///    - Apr√®s modification du mod√®le, il faut **synchroniser** Prisma avec la base :
///        ```bash
///        npx prisma migrate dev --name init
///        ```
///    - Puis g√©n√©rer le client √† jour :
///        ```bash
///        npx prisma generate
///        ```
///
/// üîπ 5. Requ√™tes possibles via Prisma Client
///    - Cr√©er un utilisateur :
///        ```ts
///        await prisma.user.create({ data: { email, name, password } });
///        ```
///    - Trouver tous les utilisateurs :
///        ```ts
///        const allUsers = await prisma.user.findMany();
///        ```
///    - Mettre √† jour un utilisateur :
///        ```ts
///        await prisma.user.update({ where: { id: 1 }, data: { name: "Jean" } });
///        ```
///    - Supprimer un utilisateur :
///        ```ts
///        await prisma.user.delete({ where: { id: 1 } });
///        ```
///
/// üîπ 6. Bonnes pratiques p√©dagogiques
///    ‚úÖ Toujours v√©rifier la pr√©sence de `DATABASE_URL` dans ton environnement.
///    ‚úÖ Ne jamais stocker de mot de passe en clair (toujours le hacher avant).
///    ‚úÖ Utiliser `npx prisma studio` pour explorer visuellement la base.
///    ‚úÖ Ajouter des mod√®les suppl√©mentaires (ex : `Post`, `Comment`, etc.) pour
///       observer la cr√©ation automatique des relations par Prisma.
///
/// ----------------------------------------------------------------------------
/// En r√©sum√© :
/**
 * Ce fichier `prisma.schema` agit comme une **source unique de v√©rit√©** entre
 * ton code et ta base de donn√©es. 
 * Il d√©finit :
 *  - le **type de base** utilis√©e (ici PostgreSQL),
 *  - les **mod√®les de donn√©es** (ici `User`),
 *  - et permet √† Prisma de g√©n√©rer automatiquement le client JS/TS.
 *
 * L‚Äôint√©r√™t p√©dagogique est double :
 * 1Ô∏è‚É£ Montrer comment la mod√©lisation de donn√©es en code (mod√®le Prisma)
 *     se traduit automatiquement en table SQL via les migrations.
 * 2Ô∏è‚É£ Permettre aux √©tudiants de manipuler une base SQL complexe sans √©crire
 *     une seule requ√™te SQL √† la main, gr√¢ce √† un ORM moderne et typ√©.
 */
/// ============================================================================
