import "dotenv/config";

const required = [
  "DATABASE_URL",
  "MONGO_URL",
  "JWT_ACCESS_SECRET",
  "JWT_REFRESH_SECRET",
  "UPLOAD_DIR"
] as const;

for (const k of required) {
  if (!process.env[k]) throw new Error(`Missing env var: ${k}`);
}

export const env = {
  NODE_ENV: process.env.NODE_ENV || "development",
  PORT: Number(process.env.PORT || 8080),
  DATABASE_URL: process.env.DATABASE_URL!,
  MONGO_URL: process.env.MONGO_URL!,
  JWT_ACCESS_SECRET: process.env.JWT_ACCESS_SECRET!,
  JWT_REFRESH_SECRET: process.env.JWT_REFRESH_SECRET!,
  ACCESS_TOKEN_TTL: process.env.ACCESS_TOKEN_TTL || "15m",
  REFRESH_TOKEN_TTL: process.env.REFRESH_TOKEN_TTL || "7d",
  COOKIE_DOMAIN: process.env.COOKIE_DOMAIN || "localhost",
  CORS_ORIGIN: process.env.CORS_ORIGIN || "http://localhost:5173",
  UPLOAD_DIR: process.env.UPLOAD_DIR!
};

/// ============================================================================
/// üìò R√©sum√© p√©dagogique complet ‚Äî Comprendre le fichier `env.ts`
/// ----------------------------------------------------------------------------
/// Ce fichier est un **point central de configuration** pour l'application.
/// Il assure √† la fois :
///   ‚úÖ le chargement automatique des variables d‚Äôenvironnement,  
///   ‚úÖ la v√©rification de leur pr√©sence,  
///   ‚úÖ et la centralisation de toutes les valeurs importantes dans un objet `env`.
///
/// üîπ 1. Chargement des variables avec `dotenv`
///    - La ligne `import "dotenv/config"` lit automatiquement le fichier `.env`
///      pr√©sent √† la racine du projet.
///    - Chaque ligne du `.env` (ex: `DATABASE_URL=...`) est inject√©e dans `process.env`.
///    - Cela permet de configurer des valeurs sensibles (URL, cl√©s JWT, etc.)
///      sans les √©crire directement dans le code source.
///
/// üîπ 2. Liste des variables obligatoires
///    - Le tableau `required` √©num√®re les cl√©s consid√©r√©es comme **indispensables**.
///      Exemple :
///        ```ts
///        const required = [ "DATABASE_URL", "MONGO_URL", ... ] as const;
///        ```
///    - Si une de ces variables n‚Äôest pas d√©finie, le programme s‚Äôarr√™te
///      imm√©diatement avec une erreur claire :
///        ```bash
///        Error: Missing env var: DATABASE_URL
///        ```
///    - Cette v√©rification √©vite des comportements impr√©visibles plus tard
///      (par exemple, un crash au moment de se connecter √† la base).
///
/// üîπ 3. L‚Äôobjet `env` export√©
///    - C‚Äôest **l‚Äôinterface propre et typ√©e** que tout le reste du code importe.
///      Exemple d‚Äôutilisation :
///        ```ts
///        import { env } from "./config/env";
///        console.log(env.DATABASE_URL);
///        app.listen(env.PORT);
///        ```
///    - Les valeurs sont soit :
/**       ‚Ä¢ extraites directement du fichier `.env`
 *        ‚Ä¢ soit dot√©es de valeurs par d√©faut (pour le mode d√©veloppement).
 */
///
/// üîπ 4. Contenu d√©taill√© de l‚Äôobjet `env`
///
/// | Champ | Description | Exemple ou d√©faut |
/// |--------|--------------|------------------|
/// | `NODE_ENV` | Environnement de travail | `"development"` ou `"production"` |
/// | `PORT` | Port HTTP utilis√© par le serveur | `8080` par d√©faut |
/// | `DATABASE_URL` | Cha√Æne de connexion PostgreSQL pour Prisma | `"postgresql://..."` |
/// | `MONGO_URL` | Cha√Æne de connexion MongoDB (second stockage) | `"mongodb://..."` |
/// | `JWT_ACCESS_SECRET` | Cl√© secr√®te pour signer les tokens d‚Äôacc√®s | ‚Äî |
/// | `JWT_REFRESH_SECRET` | Cl√© secr√®te pour les tokens de rafra√Æchissement | ‚Äî |
/// | `ACCESS_TOKEN_TTL` | Dur√©e de vie du token d‚Äôacc√®s | `"15m"` |
/// | `REFRESH_TOKEN_TTL` | Dur√©e de vie du token de rafra√Æchissement | `"7d"` |
/// | `COOKIE_DOMAIN` | Domaine utilis√© pour les cookies | `"localhost"` |
/// | `CORS_ORIGIN` | Origine autoris√©e par le serveur | `"http://localhost:5173"` |
/// | `UPLOAD_DIR` | R√©pertoire local pour les fichiers upload√©s | `"./uploads"` |
///
/// üîπ 5. Avantages p√©dagogiques
///    ‚úÖ **Lisibilit√©** : les variables sont toutes regroup√©es ici, √©vitant
///       les `process.env.XYZ` dispers√©s dans tout le projet.
///    ‚úÖ **S√©curit√©** : le programme s‚Äôarr√™te d√®s qu‚Äôune variable critique
///       est manquante.
///    ‚úÖ **Portabilit√©** : le m√™me code fonctionne en local et dans Docker
///       (les variables changent simplement de fichier `.env`).
///    ‚úÖ **Typage fort** : le `as const` permet √† TypeScript d‚Äôassurer une
///       v√©rification stricte des noms de variables requises.
///
/// üîπ 6. Bonnes pratiques √† enseigner
///    - Toujours valider les variables d√®s le d√©marrage de l‚Äôapplication.
///    - Jamais de cl√© ou mot de passe cod√© en dur dans le code source.
///    - Utiliser diff√©rents fichiers `.env` selon l‚Äôenvironnement :
/**       ‚Ä¢ `.env` pour le d√©veloppement
 *        ‚Ä¢ `.env.docker` pour Docker
 *        ‚Ä¢ `.env.production` pour le d√©ploiement
 */
///    - √âviter de committer ces fichiers sensibles (ajouter `.env*` dans `.gitignore`).
///
/// ----------------------------------------------------------------------------
/// En r√©sum√© :
/**
 * `env.ts` agit comme une **passerelle de s√©curit√©** entre ton code et ton
 * environnement d‚Äôex√©cution.
 * Il t‚Äôassure que toutes les variables critiques sont pr√©sentes avant que
 * l‚Äôapplication ne d√©marre, et t‚Äôoffre un acc√®s centralis√© et typ√© √† toutes
 * ces valeurs.
 *
 * L‚Äôobjectif p√©dagogique :
 *  - Comprendre comment Node.js g√®re la configuration par environnement.
 *  - Apprendre √† s√©curiser les secrets et les cl√©s API.
 *  - Favoriser une architecture claire, portable et maintenable.
 */
/// ============================================================================
